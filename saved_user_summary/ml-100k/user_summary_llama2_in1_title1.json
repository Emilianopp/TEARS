{
  "655": {
    "Western": "  For the above movie list, please generate a summary for the following movie list.  The following movies are from the 'Science",
    "Sci-Fi": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Hud (7",
    "Documentary": "The summary should contain the movie title, the year it was released, the director's name and the actors/actresses' names. The",
    "Fantasy": "  Note: The genre of each movie is taken from the imdb page of each movie.  Note: The genre of each movie is",
    "Thriller": " ```  ### 3. Write a function called `find_similar_movie_by_plot` which takes in a string of",
    "Drama": "  Solution  import re  def main():     lines = []     with open(\"input.txt\") as file:",
    "Action": "  In the first example, \"sci-fi\" is added as the genre tag after \"action\". The second example uses the genre tags \"",
    "Children": "  For example:  Jumanji (995): Jumanji is a 995 American fantasy adventure film",
    "Animation": "   ## Installation  1. Download the zip file 2. Unzip the file 3. In the directory containing the un",
    "Comedy": "  I've written a program that generates such summaries. It is written in Java, and the code is available here: https://github",
    "Musical": "  ```  ## Solution:  ```python import re import pandas as pd  df = pd.read_csv",
    "Romance": " ```   ### Solution ```python import requests from bs4 import BeautifulSoup   def get_movies",
    "IMAX": " 1111111111111111111111111111",
    "Crime": " ```  ### Input  ``` Judge Dredd (995) Strange Days (995",
    "Horror": "  ``` #include <iostream> #include <algorithm>  using namespace std;  int main() {     vector",
    "Film-Noir": "Thanks!  Answer:  \\begin{code} import pandas as pd import numpy as np from scipy.sparse",
    "War": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Dredd (",
    "Adventure": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Mystery": "  [IMPORTANT] In this problem, you are not required to write a summary based on the movies given.  "
  },
  "450": {
    "Thriller": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Comedy": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "IMAX": "  Examples: Judge Dredd (995): Judge Dredd is a 995 American science fiction",
    "Mystery": "  #!/bin/bash # 2019 # by @yuanjie   # -------------------------------------------------",
    "Children": "  I'm getting the error:  \"KeyError: 'genre' not in dictionary\"  and the \"genre",
    "Fantasy": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Western": " ```  ### \ud83d\udca1 Task 2  ``` Task: Given a list of movies, generate a high",
    "Crime": " ```  --- ## Solution  In my solution, I used an RNN to generate the summary. I use a bidirectional",
    "Animation": "  Example:  Judge Dredd (995): Judge Dredd is a 995 American science fiction",
    "Horror": "  Answer:  The following movies are horror:  Prophecy, The (995) Wes Craven",
    "Documentary": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Film-Noir": " 1111111111111111111111111111",
    "Romance": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Irrevers",
    "Sci-Fi": "Thanks!  Task: Given a list of movies, generate a high-level summary. The following are some examples:  The Lost",
    "Adventure": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Lara Croft",
    "Drama": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "War": "  ### 1. Write a function to generate a summary for movies of a certain genre   ```python def movie_",
    "Musical": "  Here's the script that I've written so far:  ```python import re from collections import Counter  ",
    "Action": "  ### Input Format  You will be given a list of movies, one per line.  ### Output Format  "
  },
  "276": {
    "Horror": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Alien (",
    "Action": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  The Thing (",
    "War": "  Answer:  ```python import re from nltk.stem.porter import PorterStemmer stem",
    "Romance": "  Answer:  #import re  def main():     summary = \"\"     movie_list = []     movie_",
    "Mystery": "  This task is a modified version of Task 12 in the NLP with Python course on Udacity.1111",
    "Thriller": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Western": "  Answer:  This is the code I came up with. It's not the best, but I am just learning Python. ",
    "Comedy": "  Note: The output should be one line for each movie. 11111111111111",
    "Children": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  House of Sand",
    "Film-Noir": "  Your task is to take in a list of movies and generate the summary above based on the genre of the movie. You may assume that",
    "Sci-Fi": " '''  import os import sys  import argparse import glob import logging import time  from collections import Counter",
    "Fantasy": "  The movie summaries are generated in a file. It is available here.111111111111",
    "Musical": "  The task can be solved by the following approaches.  #### Approach 1  ``` class Movie {   private int",
    "IMAX": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Drama": "  ### Example  Judge Dredd (995): Judge Dredd is a 995 American science",
    "Adventure": "  Solution: ``` import re import sys   def main(data):     data = data.split('\\n",
    "Crime": "   #### [ ] Part 1 - Given a list of movies, generate a high-level summary.  ```py mov",
    "Animation": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Documentary": " 1111111111111111111111111111"
  },
  "405": {
    "Musical": "  #!/bin/bash  echo \"Please add your movies here:\" read movie echo \"Done\"  echo \"",
    "Action": "  Answer:  \\begin{code} import os from collections import defaultdict from nltk.stem.s",
    "Sci-Fi": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Tenet (",
    "War": " ```      ```python import nltk from nltk.corpus import movies from nlt",
    "Thriller": "  Answer:  \\begin{code} import string import random import requests import re from bs4 import BeautifulS",
    "Western": " ```  ### Solution  ```python from random import shuffle  def get_genre_from_index(index",
    "Comedy": "  111111111111111111111111111",
    "Horror": " \"\"\"  def generate_summary(genre):     return \"\".join(         \"{}\\n{}\\n\".",
    "Film-Noir": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Children": "  Solution: ```python import csv import random from random import choice   with open('movies.csv',",
    "Drama": "  Answer:  ```python import re  movie_list = [\"Judge Dredd (995)\", \"",
    "IMAX": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Battle",
    "Crime": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Fantasy": "  Alice in Wonderland (95)  The 95 fantasy film Alice in Wonderland is based on Lewis Carroll",
    "Romance": " ```  ### 2. Given two integers A and B, find the integer C such that A > C > B  ```",
    "Mystery": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  The Lost World (",
    "Animation": "  I'm not sure what the correct answer is here. It seems like they want all the movies in the genre (Animation) to",
    "Documentary": " ```  ### Answer  - *Movies dealing with Norse mythology.* - I watched Thor a couple weeks ago",
    "Adventure": " ```  ### Solution  ```python import re import string  class MovieGenre:     def __init__("
  },
  "13": {
    "Animation": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Batman (",
    "Fantasy": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Fight Club (",
    "Horror": "  The above example will generate a high-level summary with a summary count of 32.  Please note that, if a movie",
    "Comedy": "  111111111111111111111111111",
    "Western": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Musical": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Crimson T",
    "Thriller": "  [Note: The above are from my notes in 2016 when I was taking the Coursera \"Machine Learning\" course",
    "IMAX": "  Your task is to write a Python function that takes the above list of movies and outputs a summary for each movie.  The input",
    "Crime": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "War": "   ## Output  ``` Summary: War with a patriotic feel. Thanks!  Mise... (995):",
    "Adventure": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Judge D",
    "Drama": "  ## Installation  To install, run the following command.  ```bash $ pip install git+git://github.com",
    "Action": "  I've looked for a simple implementation of summarization but the algorithms used are a little out of my depth, but I know this is",
    "Film-Noir": "  Input Format: A file containing the movies in the genre Film-Noir  Output Format: The high-level summary for each",
    "Children": "    ### Aggregate  Write a program that generates a high-level summary of the top 100 movies",
    "Sci-Fi": " \"\"\"  # Definition for a Node. class Node:     def __init__(self, val, children=None): ",
    "Mystery": "  Task: Given a list of movies, generate a high-level summary. The following are some examples:  Halloween",
    "Romance": "  Note: You can use the command line tool movie-summarize.py to generate the summaries.  I used the summar",
    "Documentary": "  Answer:  Task: Given a list of movies, generate a high-level summary. The following are some examples:  "
  }
}