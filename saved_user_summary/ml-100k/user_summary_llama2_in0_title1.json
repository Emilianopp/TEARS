{
  "276": {
    "Children": "   Input:  [[974],[990],[995],[995],[996],[99",
    "Animation": "  Input: Movies [0, 99, 994, 993, 995, ",
    "Thriller": " ```  ### 1.0.1  #### 1.0.1.1   ``` Movie ",
    "War": " ```  ## Output  ``` - Canadian Bacon - Courage Under Fire - Forrest Gump - Manch",
    "Musical": "  ```  [Buzz] ```  ### Movies  * Movies:     * Evita (9",
    "Comedy": "  Input Format A movie with an year, a genre, a name and a plot description.  Output Format A summary in Chinese",
    "Mystery": "  The summary is generated by averaging the summaries of each movie. \"\"\" import random from movie_db import Movie,",
    "Drama": "  ### Input  This script reads in a .csv file which is generated by the \"Read Movie Info\" script. The csv",
    "Film-Noir": "   11111111111111111111111111",
    "Western": "  #### 1. Movies summary  * Geronimo: An American Legend * Wild Bill * Lone Star ",
    "Adventure": "  ### The Adventure of Akira  The Adventure of Akira is a 1988 Japanese science fiction",
    "Crime": "  ``` +----------------------------------------------------------+ |                                                           | |                                                           | |                                                          ",
    "Horror": "   ### DATA  | Movie | |---| |Cemetery Man (Dellamorte Dellamore",
    "Sci-Fi": "  Input Format: The input format is a list of movies in JSON format. The output is the text summaries for each movie.",
    "IMAX": " ``` +---------------+-------------+ | Title         | Director   | +---------------+-------------+ | IMAX: Earth   |",
    "Documentary": "  Input Format: A sequence of movies, each movie is of the following format:   Movie: [MovieID]: [Gen",
    "Romance": "                             ",
    "Fantasy": "  The Prophecy (995) Nightmare Before Christmas, The (993) Willy W",
    "Action": "  Input:  A. action movies list: 979, 996, 993, "
  },
  "13": {
    "Documentary": " ```  Sample output: ``` Film: Across the Sea of Time (995) Genre: Documentary",
    "IMAX": "  Movies that are not IMAX movies will not be included in the summary.  The format of the summary should be as",
    "Mystery": " ```  ### Output  ``` Task: Given the following movies of genre Mystery, please generate a high-level summary",
    "Horror": "  From Dusk Till Dawn (996) Addiction, The (995) 30, 30",
    "Action": "  ```python import argparse from pathlib import Path import sys  import pandas as pd import numpy as np from",
    "Fantasy": "  Expected Output: Jumanji (995) Jumanji (995) Highlander III:",
    "Thriller": "  ```python from gensim.models import Word2Vec from gensim.downloader import WebLinks import numpy as np",
    "Children": "  Input:  ``` 555 222 999 333 444 2",
    "Romance": "  Example: Given a list of movies: The Matrix (97), The Matrix Reloaded (98), The Matrix Revolution",
    "Comedy": "  Input:  \tInput the names of movies of genre Comedy as follows. \t\tAce Ventura: Pet Det",
    "Adventure": "  ''' import moviepy.editor as mp from moviepy.editor import * from moviepy.tools.visualization import im",
    "Animation": " ```  ```python from tqdm import tqdm from utils import get_data_list from utils import",
    "Musical": "     ## Importing the libraries  ```python import numpy as np import pandas as pd import seaborn as",
    "Film-Noir": "  I.e.  ```  ### Devil in a Blue Dress  + Synopsis: The story of E",
    "Sci-Fi": "  Sample output:  Genre: Science Fiction  Star Trek: Generations (1994) is a Science",
    "Drama": "  Input Format:   The movies above are in order of their genres.  Output Format:   High-",
    "Crime": "  ## Task 2:  Task: Given the following movies of genre Romance, please generate a high-level summary. ",
    "Western": "  111111111111111111111111111",
    "War": "  Mis\u00e9rables, Les War movie directed by 995 Starring 993 and 99"
  },
  "450": {
    "Mystery": "  Input:  Output:  The movie Flesh and Bone (993) is in the genre Mystery. ",
    "Romance": "  ``` (1, 'A married couple, made up of a writer and his actress wife, travel to her hometown, where",
    "IMAX": "  ```python import pandas as pd import numpy as np from sklearn.feature_extraction.text import Tfidf",
    "Adventure": " ```  ### Solution  This is a modified version of the original `summary_movie.py` code from the original repository.",
    "Horror": " ```  ## Output  | Movie Title                                                 | Summary                                         | | ----------------------------------------------------------- | -",
    "Documentary": "  The following movies are generated:  ### Task 1: Given the following movies of genre Documentary, please generate a",
    "Thriller": "  ### Movie 1: Assassins  The film opens with a young man who is in his room in a cheap motel",
    "Children": " ```  ### Input Format  Each line of the input is a movie description (the first line is an example of such description).",
    "Drama": "  Input Format The input will be in the form of lines.  The first line will be the genre (Drama) of the",
    "Sci-Fi": " ```  ### Inputs - movies: a list of movies of genre Sci-Fi  ### Outputs ",
    "Animation": "  Task: Given the following movies of genre Animation, please generate a high-level summary.   Ghost in the Sh",
    "Action": "  ```  ## Model  Model can be trained with the following command: ``` python train.py ```  ##",
    "War": "  ```  ```  111111111111111111111",
    "Film-Noir": "  Input format:  Each line contains a movie and its corresponding IMDB rating.  Example:  The Third Man (9",
    "Comedy": "  # Hint  Use the following command to load your customized dataset ```python from dataset import Dataset  dataset =",
    "Fantasy": "  * Input Format  Enter the number of movies followed by a space followed by the movie titles.  * Output Format  ",
    "Crime": "  Input: \"Assassins (995) Big Sleep, The (946) Hackers (",
    "Musical": "  Task: Given the following movies of genre Horror, please generate a high-level summary.   Nosferatu",
    "Western": " ```  Output: ``` The storyline of the movies is as follows:  - Tombstone: The movie is"
  },
  "655": {
    "Western": "  [You can input up to 10000 words]  [10000 chars remaining] ``` ",
    "Mystery": " ```  ### Example      +---------------+     | Movie Id       |     +---------------+     | 9",
    "Thriller": "  Task: Given the following movies of genre Thriller, please generate a high-level summary.   Primal Fear",
    "Animation": " ```  ### Summary ``` Goofy Movie, A (995) Pagemaster, The (9",
    "Musical": "  I will take 5000 as the number of documents, 5 as the number of topics, and 3 as the number",
    "Comedy": "  ## Example:  * Apple Dumpling Gang, The (975)  Apple Dumpling Gang, The (1",
    "Horror": "  ```python import nltk from nltk.corpus import movie_reviews  def movie_summary(movie",
    "Sci-Fi": "  ``` 2007 |-Genre: Sci-Fi |-Stars:  |  - Melanie",
    "Drama": "  Answer:   <table style=\"width:100%;border-collapse:collapse;table-layout:fixed;",
    "Crime": "  ``` Input: [995, 996, 997, 998, 99",
    "Romance": "  You are given the following information:  Each movie is an English-language movie.  The total number of movies in the",
    "Documentary": "  <a href=\"http://j.mp/2dqsF0A\" target=\"_blank\"> <img src=\"",
    "Action": "  ```python from utils.general import * import os import pandas as pd import sys import argparse import datetime",
    "Adventure": "  The movies can be downloaded from this URL.  ``` https://www.kaggle.com/fantasy-",
    "IMAX": "  Input: * genre IMAX * title Black Panther * runtime 2:05:16 * genres",
    "Children": "  You can access the list of movies at https://github.com/jayeshgolchha/movies-api-",
    "War": "  [Forrest Gump (994)] Academy Award-winner Tom Hanks and director Robert Zemeckis (",
    "Fantasy": "  ### Results  The below summaries were generated from the given movies.  - [The above summary was generated by the",
    "Film-Noir": " ```  ### Sample Summary  ``` Film-Noir movie summary ======================  Miller's"
  },
  "405": {
    "Sci-Fi": "  ```  [summary_result]:    Star Wars: Episode VI - Return of the Jedi (98",
    "Romance": "   Input Format: Each line is a movie title.   Output Format: Each line is the movie summary.  ",
    "Crime": "  The output should be formatted as follows:  { \"Movies\": [     {         \"genres\": [\"",
    "Action": "  Result: 1. Hackers (995)     Genre: Action     Summary: Hackers (",
    "Horror": " ```  ### Example:  ``` Lord of Illusions (995) Movie Genre: Horror",
    "Adventure": " ```  ### 2. Input Format  - `genres`: string - `movies`: string  ###",
    "Animation": " ```  ### Output  ``` | Movie Title | Year | Genre | Summary | | ---------- | ----",
    "Comedy": "  I'm going to summarize the movie \"George of the Jungle (997)\", and the summary is: \"Ge",
    "Documentary": " ```  ```python import numpy as np import pandas as pd import json from nltk.tokenize import word_",
    "Fantasy": "  Input: [   \"Dragonheart (996)\",   \"Mortal Kombat (995",
    "Mystery": "   * * * * @author: Shaohua Liu <liushaohua@126.com>",
    "War": "  ``` Input:  Movies:  [     {         \"title\": \"Full Metal Jacket\", ",
    "Children": "  ```  ### Explanation  #### Input  ``` Please input movie_id, genre_id, output_",
    "Musical": "  \"\"\"  import json from datetime import datetime from datetime import timedelta from urllib.request import urlopen",
    "Western": "  The following is a summary of the above movies.   Angel and the Badman (947)  T",
    "Thriller": " '''  # import the necessary packages import pandas as pd import numpy as np import re  #import the movie data ",
    "IMAX": "  ### Result  The summary is as follows:  - IMAX: IMAX 3D - IMAX: I",
    "Drama": " ```  #### Solution  ```python from datetime import datetime from urllib.request import urlopen from bs4 import",
    "Film-Noir": "  ``` 2 Days in the Valley  ---------------------------------------------------------------  An American filmmaker is shot at his home in Los"
  }
}